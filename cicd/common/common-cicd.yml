### This template provides common CICD functionality for building SAM applications

# Application
variables:
  SHOW_ENVIRONMENT_INFO: "true"
  SAM_PACKAGE_FILE: "packaged.yml"
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  ENV_DEPLOY_NAMESPACE:
    description: "The namespace of this deployment.  This allows multiple versions of the application to be deployed to the same region"
    value: ""
  ENV_DEPLOY_ENVIRONMENT:
    description: "The environment for this deployment.  Valid options are 'dev', 'test', 'integration' and 'production'"
    value: ""
  ENV_DEPLOY_SCOPE:
    description: "The scope product family of this application.  This is usually something like 'lds'."
    value: "lds"
  ENV_DEPLOY_REGION:
    description: "The region to deploy the application."
    value: ""

cache:
  paths:
    - .m2/repository
  key: "$CI_BUILD_REF_NAME"

################# COMMON JOB CONFIG
# A task that shows relevant CICD information for informational purposes
.show-cicd-environment:
  - |
    if [[ $SHOW_ENVIRONMENT_INFO == "true" ]]
    then
      echo "APPLICATION_NAME:         $APPLICATION_NAME"
      echo "CATAPULT_WORKFLOW_ACTION: $CATAPULT_WORKFLOW_ACTION"
      echo "CI_COMMIT_REF_PROTECTED:  $CI_COMMIT_REF_PROTECTED"
      echo "CI_PIPELINE_SOURCE:       $CI_PIPELINE_SOURCE"
      echo "CI_COMMIT_BRANCH:         $CI_COMMIT_BRANCH"
      echo "CI_COMMIT_TITLE:          $CI_COMMIT_TITLE"
      echo "CI_COMMIT_SHA:            $CI_COMMIT_SHA"
      echo "CI_PIPELINE_ID:           $CI_PIPELINE_ID"
      echo "CI_DEFAULT_BRANCH:        $CI_DEFAULT_BRANCH"
      echo "ENV_DEPLOY_NAMESPACE:     $ENV_DEPLOY_NAMESPACE"
      echo "ENV_DEPLOY_ENVIRONMENT:   $ENV_DEPLOY_ENVIRONMENT"
      echo "ENV_DEPLOY_SCOPE:         $ENV_DEPLOY_SCOPE"
      echo "ENV_DEPLOY_REGION:        $ENV_DEPLOY_REGION"
      echo "ENV_STACK_NAME:           $ENV_STACK_NAME"
      echo "ENV_STACK_VPC:            $ENV_STACK_VPC"
      echo "ENV_STACK_REDIS:          $ENV_STACK_REDIS"
      echo "ENV_STACK_KINESIS:        $ENV_STACK_KINESIS"
      echo "ENV_STACK_API_GATEWAY:    $ENV_STACK_API_GATEWAY"
    fi


stages: # List of stages for jobs, and their order of execution
  - build
  - deploy

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  # Run a pipeline if the trigger was 'merge_request_event'
      variables:
        CATAPULT_WORKFLOW_ACTION: "commit_to_open_merge_request"
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'  # Do not run a pipeline if it was already run by the above rule
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'       # Run this pipeline if the merge was to default branch
      variables:
        CATAPULT_WORKFLOW_ACTION: "merge_to_default_branch"
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'  # Run any other pipelines on 'push'
      variables:
        CATAPULT_WORKFLOW_ACTION: "commit_to_feature_branch"

# provides configuration for jobs running after a merge to the default branch
.execute-on-commit-to-merge-request:
  rules:
    - if: '$CATAPULT_WORKFLOW_ACTION == "commit_to_open_merge_request"'
      when: on_success
      allow_failure: false

.execute-on-merge-to-default:
  rules:
    - if: '$CATAPULT_WORKFLOW_ACTION == "merge_to_default_branch"'
      when: on_success
      allow_failure: false

# provides common configuration for jobs running a manual deploy
.execute-web-trigger:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CATAPULT_WORKFLOW_ACTION != "merge_to_default_branch"'
      when: on_success
      allow_failure: false


##########  JOB TEMPLATES
# Build and run unit tests for a SAM function
.build-sam-lambda:
  stage: build
  before_script:
    - !reference [ .show-cicd-environment ]
  script:
    - sam validate -t sam.yml --region ${ENV_DEPLOY_REGION}
    - sam build -t sam.yml

# Deploy a SAM function to aws infrastructure. When executed, this job rebuilds the application before packaging it.
.deploy-sam-lambda:
  variables:
    ENV_STACK_VPC: "${ENV_DEPLOY_NAMESPACE}-${ENV_DEPLOY_ENVIRONMENT}-${ENV_DEPLOY_SCOPE}-vpc"
    ENV_STACK_REDIS: "${ENV_DEPLOY_NAMESPACE}-${ENV_DEPLOY_ENVIRONMENT}-${ENV_DEPLOY_SCOPE}-elasticache-redis"
    ENV_STACK_KINESIS: "${ENV_DEPLOY_NAMESPACE}-${ENV_DEPLOY_ENVIRONMENT}-${ENV_DEPLOY_SCOPE}-kinesis"
    ENV_STACK_API_GATEWAY: "${ENV_DEPLOY_NAMESPACE}-${ENV_DEPLOY_ENVIRONMENT}-${ENV_DEPLOY_SCOPE}-api-gateway"
    ENV_STACK_NAME: "${ENV_DEPLOY_NAMESPACE}-${ENV_DEPLOY_ENVIRONMENT}-${APPLICATION_NAME}"
  stage: deploy
  before_script:
    - !reference [ .show-cicd-environment ]
  script:
    - sam build -t sam.yml
    - sam package
      --output-template-file ${SAM_PACKAGE_FILE}
      --region ${ENV_DEPLOY_REGION}
      --s3-bucket lambda-deploy-lds-${ENV_DEPLOY_REGION}
      --s3-prefix ${APPLICATION_NAME}/${ENV_DEPLOY_ENVIRONMENT}
    - sam deploy
      --stack-name ${ENV_STACK_NAME}
      --template-file ${SAM_PACKAGE_FILE}
      --region ${ENV_DEPLOY_REGION}
      --no-fail-on-empty-changeset
      --capabilities CAPABILITY_IAM
      --parameter-overrides
      VersionId=${CI_COMMIT_SHORT_SHA}
      StackNamespace=${ENV_DEPLOY_NAMESPACE}
      StackEnv=${ENV_DEPLOY_ENVIRONMENT}
      VpcStack=${ENV_STACK_VPC}
      RedisStack=${ENV_STACK_REDIS}
      KinesisStack=${ENV_STACK_KINESIS}
      ApiGatewayStack=${ENV_STACK_API_GATEWAY}


######### EXECUTABLE JOBS
build-lambda:
  variables:
    ENV_DEPLOY_REGION: "ap-southeast-2"
  extends:
    - .build-sam-lambda
  tags:
    - lds

deploy-lambda-integration:
  variables:
    ENV_DEPLOY_NAMESPACE: "cicd"
    ENV_DEPLOY_ENVIRONMENT: "integration"
    ENV_DEPLOY_SCOPE: "lds"
    ENV_DEPLOY_REGION: "ap-southeast-2"
  extends:
    - .execute-on-merge-to-default
    - .deploy-sam-lambda
  tags:
    - lds-npe-deploy

deploy-lambda-manual:
  extends:
    - .execute-web-trigger
    - .deploy-sam-lambda
  tags:
    - lds-npe-deploy

